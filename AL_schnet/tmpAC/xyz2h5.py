import os,sys,math,copy
import numpy as np
import random as rand
import h5py

#GANG SEOB JUNG at ORNL 12.16.2021, PYTHON3
#Email:jungg@ornl.gov or gs4phone@gmail.com
#Read Hydrocarbon XYZ coords generated by lammps to h5 format (TorchANI)

def SaveHDF5(filename,coordinates,forces,energy,species,cell,virial):
    h5f = h5py.File(filename,'w')    
    mols = h5f.create_group('mols')
    mol = mols.create_group('mol')
    mol.create_dataset('coordinates',data=coordinates)
    mol.create_dataset('forces',data=forces)
    mol.create_dataset('cell',data=cell)
    mol.create_dataset('energies',data=energy)
    mol.create_dataset('species',data=species)
    mol.create_dataset('virial',data=virial)    
    print('Saved')
    h5f.close()

def CheckHDF5(filename):
    h5fr = h5py.File(filename,'r')
    mols =h5fr['mols']
    mol =mols['mol']
    print("Filename: %s" %filename)
    print("Keys: %s" %mol.keys())
    print(mol['species'],mol['species'][:])
    print(mol['cell'])
    print(mol['coordinates'])
    print(mol['forces'])    
    print(mol['energies'])
    print(mol['virial'])    
    h5fr.close()            

def ReadHDF5(filename,cut):
    h5fr = h5py.File(filename,'r')    
    mols =h5fr['mols']
    mol =mols['mol']
    coordinates = np.array(mol['coordinates'][cut:])
    forces = np.array(mol['forces'][cut:])
    cell = np.array(mol['cell'][cut:])
    energies = np.array(mol['energies'][cut:])
    species = np.array(mol['species'][:])
    virial = np.array(mol['virial'][cut:])    
    print('########## Read %s ###############' %filename)
    print('######### Species %s ' %len(species))
    print('######### Data # %s ' %len(coordinates))    
    h5fr.close()    
    return coordinates,forces,cell,energies,species,virial

class Atom:
    def __str__(self):
        return "Position " + str(self.x) +" " +str(self.y) + " " +str(self.z)
    def __init__(self,coor,aname):
        self.x = coor[0]
        self.y = coor[1]
        self.z = coor[2]
        self.eps =0.0
        self.aname =aname
        if(aname=='C'):
            self.atype =1
        else:self.atype=2
    def coord(self):
        return [self.x,self.y,self.z]

class HCsystem:
    def __str__(self):
        tmp="lx " + str(self.lx) +" ly " +str(self.ly)+"\n"
        return tmp
    def __init__(self,lx,ly,lz):
        sqrt3=math.sqrt(3)
        bondl=1.42
        #self.atype=["C","H"]
        self.atype=["C"]
        self.bondl=bondl
        self.xlo=0.0
        self.ylo=0.0
        self.zlo=-16.75
        self.zhi=16.75
        self.lx=lx
        self.ly=ly
        self.lz=lz
        self.xy = 0.0
        self.yz = 0.0
        self.xz = 0.0
        self.latticex = sqrt3*bondl
        self.latticey = 3*bondl
        self.latticez = 3.35
        self.atoms=[]
        self.clist=[]
        self.blist=[]
        self.bondlist=[]
        self.anglist=[]
        self.dilist=[]
        self.cx=1
        self.cy=1
        
        x1 = 0.0;
        y1 = 0.5*bondl;
        
        x2 = 0.5*sqrt3*bondl;
        y2 = bondl;
        
        x3 = 0.5*sqrt3*bondl;
        y3 = 2*bondl;
        
        x4 = 0.0;
        y4 = 2.5*bondl;

        self.replix = int(self.lx/self.latticex)
        self.repliy = int(self.ly/self.latticey)

        self.xhi=self.replix*self.latticex
        self.yhi=self.repliy*self.latticey

        self.lx=self.xhi-self.xlo
        self.ly=self.yhi-self.ylo

        for i in range(0,self.replix):
            for j in range(0,self.repliy):
                x0 = i*self.latticex;
                y0 = j*self.latticey;
                self.atoms.append(Atom([x0+x1,y0+y1,0.0],"C"))
                self.atoms.append(Atom([x0+x2,y0+y2,0.0],"C"))
                self.atoms.append(Atom([x0+x3,y0+y3,0.0],"C"))
                self.atoms.append(Atom([x0+x4,y0+y4,0.0],"C"))

def GenVMD(atoms,filename):
    numAtom=len(atoms)
    f=open(filename,'w')
    vmdout=str(numAtom)+"\n"
    vmdout+="Atoms. Timestep: 0\n"
    for i in range(0,len(atoms)):
        if(atoms[i].atype>0):
            vmdout+= atoms[i].aname+" "+str(atoms[i].x) +" "+str(atoms[i].y)+" "+str(atoms[i].z)+"\n"
    f.write(vmdout)
    f.close()

def GetNP(atoms):
    coords=np.empty(shape=[0,3])
    natoms=len(atoms)
    species = np.chararray(natoms)    
    for i in range(0,len(atoms)):
        tcoord = np.array(atoms[i].coord())
        coords = np.append(coords,[tcoord],axis=0)
        species[i]=atoms[i].aname
        
    #print(np.shape(coords))
    return coords,species
    
        
def ReadXYZ(filename):
    f=open(filename)
    L=f.readlines()

    atoms=[]

    for i in range(2,len(L)):
        tmp=L[i].split()
        aname=tmp[0]
        x=float(tmp[1])
        y=float(tmp[2])
        z=float(tmp[3])
        coord=(x,y,z)
        atoms.append(Atom(coord,aname))
            
    f.close()
    return atoms

def ReadXYZs(filename,natoms):
    f=open(filename)
    L=f.readlines()
    f.close()
    
    frames=[]
    nframes = int(len(L)/(natoms+2))

    print("Total number of frames: ",nframes)

    for j in range(0,nframes):
        atoms=[]
        start=2+(natoms+2)*j
        for i in range(start,start+natoms):
            tmp=L[i].split()
            aname=tmp[0]
            x=float(tmp[1])
            y=float(tmp[2])
            z=float(tmp[3])
            coord=(x,y,z)
            atoms.append(Atom(coord,aname))
        frames.append(atoms)    

    return frames

natoms=20
hc=HCsystem(100,100,100)
xy=0
xz=0
yz=0

frames=ReadXYZs('vmd.xyz',natoms)
nframe=len(frames)
#place holder
coordinates=np.empty(shape=[0,natoms,3])
cell=np.empty(shape=[0,3,3])
virial=np.empty(shape=[0,6])
energy=np.empty(shape=[0])
forces=np.empty(shape=[0,natoms,3])


#cell = np.array([[hc.lx,0,0],[xy,hc.ly,0],[xz,yz,hc.lz]]],dtype=np.float64)


#Boost up with the coordinate noise
boostnum=1
eps = [0.1,0.1,0.1] # Angstrom max-min: 0.2
ex=eps[0]
ey=eps[1]
ez=eps[2]    
for i in range(0,len(frames)):
    atoms=frames[i]    
    for j in range(0,boostnum):
        tatoms = copy.deepcopy(atoms)        
        if(j!=0):
            for ia in range(1,len(atoms)):
                dx = rand.uniform(-ex,ex)
                dy = rand.uniform(-ey,ey)
                dz = rand.uniform(-ez,ez)            
                tatoms[ia].x+=dx
                tatoms[ia].y+=dy
                tatoms[ia].z+=dz
        coords,species=GetNP(tatoms)
        h = np.array([[hc.lx,0,0],[xy,hc.ly,0],[xz,yz,hc.lz]],dtype=np.float64)    
        coordinates = np.append(coordinates,[coords],axis=0)
        cell = np.append(cell,[h],axis=0)

#energy/force/virial are all dummy        
tr_en = np.zeros(shape=[nframe*boostnum])
tr_f = np.zeros(shape=np.shape(coordinates))
tr_virial =np.zeros(shape=[nframe*boostnum,6])

fname = 'smd.h5'
SaveHDF5(fname,coordinates,tr_f,tr_en,species,cell,tr_virial)    
CheckHDF5(fname)
